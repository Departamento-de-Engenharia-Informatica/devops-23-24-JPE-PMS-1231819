# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "hashicorp/bionic64"
  config.ssh.insert_key = false

  # This provision is common for both VMs
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update -y
    sudo apt-get install -y iputils-ping avahi-daemon libnss-mdns unzip \
        openjdk-17-jdk-headless
    # ifconfig
  SHELL

  #============
  # Configurations specific to the database VM
  config.vm.define "db" do |db|
    db.vm.box = "hashicorp/bionic64"
    db.vm.hostname = "db"
    db.vm.network "private_network", ip: "192.168.30.24"

    # We set more ram memory for this VM
    db.vm.provider "vmware_desktop" do |v|
      v.memory = 1024
      v.gui = true
    end

    # We want to access H2 console from the host using port 8082
    # We want to connet to the H2 server using port 9092
    db.vm.network "forwarded_port", guest: 8082, host: 8082
    db.vm.network "forwarded_port", guest: 9092, host: 9092

    # We need to download H2
    db.vm.provision "shell", inline: <<-SHELL
      wget https://repo1.maven.org/maven2/com/h2database/h2/1.4.200/h2-1.4.200.jar
    SHELL

    # The following provision shell will run ALWAYS so that we can execute the H2 server process
    # This could be done in a different way, for instance, setting H2 as as service, like in the following link:
    # How to setup java as a service in ubuntu: http://www.jcgonzalez.com/ubuntu-16-java-service-wrapper-example
    #
    # To connect to H2 use: jdbc:h2:tcp://192.168.33.11:9092/./jpadb
    db.vm.provision "shell", :run => 'always', inline: <<-SHELL
      java -cp ./h2*.jar org.h2.tools.Server -web -webAllowOthers -tcp -tcpAllowOthers -ifNotExists > ~/out.txt &
    SHELL
  end

  #============
  # Configurations specific to the webserver VM
  config.vm.define "web" do |web|
    web.vm.box = "hashicorp/bionic64"
    web.vm.hostname = "web"
    web.vm.network "private_network", ip: "192.168.30.28"

    # We set more ram memory for this VM
    web.vm.provider "vmware_desktop" do |v|
      v.memory = 1024
      v.gui = true
    end

    # We want to access tomcat from the host using port 8080
    web.vm.network "forwarded_port", guest: 8080, host: 8080

    web.vm.provision "shell", inline: <<-SHELL

      wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.24/bin/apache-tomcat-10.1.24.tar.gz

      sudo tar xzvf apache-tomcat-10*tar.gz -C .

      sudo chown -R vagrant:vagrant apache-tomcat-10*

      sudo chmod -R u+x apache-tomcat-10*

    SHELL

    web.vm.provision "shell", :run => 'always', inline: <<-SHELL
      ./apache-tomcat-10*/bin/startup.sh
    SHELL

    web.vm.provision "shell", inline: <<-SHELL, privileged: false
      # Change the following command to clone your own repository!

      git clone https://github.com/Departamento-de-Engenharia-Informatica/devops-23-24-JPE-PMS-1231819.git
      cd devops-23-24-JPE-PMS-1231819/CA2/Part2
      sudo chmod -R a+rwx ./react-and-spring-data-rest-basic
      cd ./react-and-spring-data-rest-basic
      sed -i 's|spring.datasource.url=.*|spring.datasource.url=jdbc:h2:tcp://192.168.30.24:9092/./jpadb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE|' src/main/resources/application.properties
      sudo chmod u+x gradlew
      ./gradlew clean build
      # To deploy the war file to tomcat10??? do the following command:
      sudo cp ./build/libs/react-and-spring-data-rest-basic-0.0.1-SNAPSHOT.war ~/apache-tomcat-10*/webapps/
    SHELL
  end
end